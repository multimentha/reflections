When would you want to use a remote repository rather than keeping all your work local?
 - when collaborating with others on the project
 - when you seek to co contribute to a public project
 - when you want to share your code with others
 - when you want to access your work from multiple machines with ease
 
 ------------------------------------------------
 Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?
 
 - because you may have made changes locally that would be incompatible with the remote changes
 - because you would have to manually resolve conflicts each time
 - because the latest version may offer features/changes that you are simply not interested in or that don't work properly on your machine

------------------------------------------------
Describe the differences between forks, clones, and branches. When would you use one instead of another?
 - a fork is a clone of one GitHub user's project on to the profile of another GitHub user
 - a clone is a copy of a project (read all commits in all branches)
 - a branch is one diverging serious of commits within a project
 - Use branches for introducing new features, testing stuff. Use clones for remote access, local modifications and backups. Use forks if you want to improve/change a project while leaving the original intact or if you don't have access rights to push commits.
 
------------------------------------------------
 What is the benefit of having a copy of the last known state of the remote stored locally?
 - can work offline
 - conflicting changes can be merged and then pushed to remote

------------------------------------------------
How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?
 - You would have to swap files manually or post them on a web server
 - It's easier because you need to know less commands and concepts â€¦
 - but it introduces many pitfalls: accidentally overwriting someone's changes, incompatibility issues, introducing experimental changes becomes hard

------------------------------------------------
When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have? 
 - Use a separate branch to try out new code but keep the main branch up and operational
 - each user can have a different branch that they work on whilst not disturbing the others
 - edit the master branch directly when you are working alone and making non-critical changes

 